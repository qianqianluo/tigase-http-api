[[httpRestAPI]]
= REST API
:author: Andrzej WÃ³jcik
:version: v2.0  2016. Reformatted for v8.0.0.

:toc:
:numbered:
:website: http://www.tigase.org

Tigase's HTTP API component uses the REST module and Groovy scripts responsible for handling and processing incoming HTTP.  The end result is Tigase's REST API.
This API may be useful for various integration scenarios.

In these sections we will describe the basic REST endpoints provided by Tigase HTTP API and explain the basics of creating new custom endpoints.

Other endpoints, specific to particular Tigase XMPP Server modules, are described in documentation for the modules providing them.
You may also look at `http://localhost:8080/rest/` on your local Tigase XMPP Server installation at HTTP API, which will provide you with basic usage examples for REST endpoints available at your installation.

For more informations about configuration of REST module please see section about <<REST module>>.

== Usage examples
Below you will find some usage examples of endpoints provided by the Tigase HTTP API project.

=== Retrieving user avatar
Request using GET method for url `/rest/avatar/admin@test-domain.com` will return the avatar image for user admin@test-domain.com if an avatar is set in user vcard. If not, response will return http error 404.

The example url to retrieve avatar of user admin@domain.com is http://localhost:8080/rest/avatar/admin@domain.com. Entering this url in a browser or REST client will execute GET request.

=== Retrieving list of available adhoc commands

==== using XML format
To retrieve list of commands request using GET method for ``/rest/adhoc/sess-man@domain.com` where sess-man@domain.com is the jid of a particular component.  In this case it is the session manager. The JID of components will be based of what name is given to them in configuration.
In this example entering following url http://localhost:8080/rest/adhoc/sess-man@domain.com in a browser or a REST client will retrieve a list of all ad-hoc commands available at sess-man@domain.com. This action is protected by authentication by using https://tools.ietf.org/html/rfc2617:[HTTP Basic Authentication]. Valid credentials are credentials of users available in user database of this Tigase XMPP Server installation (username will be bare jid with domain part of jid, i.e. user@domain.com).

Below is example result of that request:
[source,xml]
----
<items>
  <item>
    <jid>sess-man@domain.com</jid>
    <node>http://jabber.org/protocol/admin#get-active-users</node>
    <name>Get list of active users</name>
  </item>
  <item>
    <jid>sess-man@domain.com</jid>
    <node>del-script</node>
    <name>Remove command script</name>
  </item>
  <item>
    <jid>sess-man@domain.com</jid>
    <node>add-script</node>
    <name>New command script</name>
  </item>
</items>
----

==== using JSON format
To retrieve list of commands in JSON we need to pass `Content-Type: application/json` as an HTTP header of the request _or_ add `type` parameter set to `application/json`.
An example result is below:
[source,json]
----
{
    "items": [
        {
            "jid": "sess-man@domain.com",
            "node": "http://jabber.org/protocol/admin#get-active-users",
            "name": "Get list of active users"
        },
        {
            "jid": "sess-man@domain.com",
            "node": "del-script",
            "name": "Remove command script"
        },
        {
            "jid": "sess-man@domain.com",
            "node": "add-script",
            "name": "New command script"
        }
    ]
}
----

=== Executing commands using ad-hoc command

==== Retrieving list of active users

===== using XML
To execute command `get active users` a request using POST method for `/rest/adhoc/sess-man@domain.com` sending following content:

NOTE: This request requires authentication using https://tools.ietf.org/html/rfc2617:[HTTP Basic Authentication]

.Request in XML
[source,xml]
----
<command>
  <node>http://jabber.org/protocol/admin#get-active-users</node>
  <fields>
    <item>
      <var>domainjid</var>
      <value>domain.com</value>
    </item>
    <item>
      <var>max_items</var>
      <value>25</value>
    </item>
  </fields>
</command>
----

In this request we passed all parameters needed to execute adhoc command. This includes the node of adhoc command, and values for fields required by that adhoc command. In this case, we've passed `domain.com` for `domainjid` field, and `25` for `max_items` field.
We also need to pass `Content-Type: text/xml` in the HTTP header of request _or_ add `type` parameter set to `text/xml`.

Below is an example result for request presented above:

.Response in XML
[source,xml]
----
<command>
  <jid>sess-man@domain.com</jid>
  <node>http://jabber.org/protocol/admin#get-active-users</node>
  <fields>
    <item>
      <var>Users: 2</var>
      <label>text-multi</label>
      <value>admin@domain.com</value>
      <value>user1@domain.com</value>
    </item>
  </fields>
</command>
----

===== using JSON
To execute the command to `get active users` in JSON format, request using POST method for `/rest/adhoc/sess-man@domain.com` sending the following content:

NOTE: Request requires authentication using https://tools.ietf.org/html/rfc2617:[HTTP Basic Authentication]

NOTE: To use JSON it is required to set HTTP header `Content-Type` to `application/json`

.Request in JSON
[source,json]
----
{
  "command" : {
    "node" : "http://jabber.org/protocol/admin#get-active-users",
    "fields" : [
      {
        "var" : "domainjid",
        "value" : "domain.com"
      },
      {
        "var" : "max_items",
        "value" : "25"
      }
    ]
  }
}
----

In this request we passed all the parameters needed to execute this adhoc command. We passed the node of adhoc command, and values for fields required by adhoc command.
In this case, we've passed `domain.com` for `domainjid` field, and `25` for `max_items` field.

.Response in JSON
[source,json]
----
{
    "command": {
        "jid": "sess-man@domain.com",
        "node": "http://jabber.org/protocol/admin#get-active-users",
        "fields": [
            {
                "var": "Users: 1",
                "label": "text-multi",
                "value": [
                  "admin@domain.com",
                  "user1@domain.com"
                ]
            }
        ]
    }
}
----

==== Ending user session

To execute command to get active users request using POST method for `/rest/adhoc/sess-man@domain.com` sending content explained below (may require authentication using `Basic HTTP Authentication` with admin credentials depending on configuration). `sess-man@domain.com` in URL is JID of session manager component which usually is in form of `sess-man@domain` where `domain` is hosted domain name.

===== using XML

To execute command using XML content you need to set HTTP header `Content-Type` to `application/xml`

.Request in XML
[source,xml]
----
<command>
  <node>http://jabber.org/protocol/admin#end-user-session</node>
  <fields>
    <item>
      <var>accountjids</var>
      <value>
        <item>test@domain.com</item>
      </value>
    </item>
  </fields>
</command>
</code></pre>
----
where `test@domain.com` is JID of user which should be disconnected.

As a result server will return following XML:

.Response in XML
[source,xml]
----
<command>
  <jid>sess-man@domain.com</jid>
  <node>http://jabber.org/protocol/admin#end-user-session</node>
  <fields>
    <item>
      <var>Notes</var>
      <type>text-multi</type>
      <value>Operation successful for user test@domain.com/resource</value>
     </item>
  </fields>
</command>
----
to confirm that user `test@domain.com` with resource `resource` was connected and it was disconnected.

If user was not connected server will return following response:
[source,xml]
----
<command>
  <jid>sess-man@domain.com</jid>
  <node>http://jabber.org/protocol/admin#end-user-session</node>
  <fields />
</command>
----

==== using JSON

To execute command using XML content you need to set HTTP header `Content-Type` to `application/json`

.Request in JSON
[source,json]
----
{
  "command" : {
    "node": "http://jabber.org/protocol/admin#end-user-session",
    "fields": [
      {
        "var" : "accountjids",
        "value" : [ "test@domain.com" ]
      }
    ]
  }
}
----
where `test@domain.com` is JID of user which should be disconnected.

As a result server will return following JSON:

.Response in JSON
[source,json]
----
{
  "command" : {
    "jid" : "sess-man@domain.com",
    "node" : "http://jabber.org/protocol/admin#end-user-session",
    "fields" : [
      {
        "var" : "Notes",
        "type" : "text-multi",
        "value" : [
          "Operation successful for user test@domain.com/resource"
        ]
      }
    ]
  }
}
----
to confirm that user `test@domain.com` with resource `resource` was connected and it was disconnected.

If user was not connected server will return following response:
[source,json]
----
{
  "command" : {
    "jid" : "sess-man@domain.com",
    "node" : "http://jabber.org/protocol/admin#end-user-session",
    "fields" : []
  }
}
----

=== Sending any XMPP Stanza
XMPP messages or any other XMPP stanza can be sent using this new API by sending an HTTP POST request on (by default) http://localhost:8080/rest/stream/?api-key=@API_KEY@ with a serialized XMPP stanza as a content, where `@API_KEY@` - is the API key for HTTP API configured in server configuration file.
Additionally each request needs to be authorized by sending a valid administrator JID and password as user and password of https://tools.ietf.org/html/rfc2617:[HTTP Basic Authentication] method.
Content of the HTTP request should be encoded in `UTF-8` and `Content-Type` header should be set to `application/xml`.

==== Handling of request
If a sent XMPP stanza does not contain `from` attribute, then the HTTP API component will provide it's own JID. If a `from` attribute is provided then it will be preserved.

If an `<iq/>` stanza is being sent and no `from` attribute is set, then in the HTTP response the component will send a response received for sent `<iq>` stanza.

Successful requests will return HTTP response code 200.

==== Examples
===== Sending XMPP message with from set to the HTTP API component to full JID:

The following data needs to be sent as HTTP POST request content to `/rest/stream/?api-key=@API_KEY@` which is the URL of the HTTP API component, in order to deliver message `Example message 1` to `test@example.com/resource-1`.
[source,xml]
----
<message xmlns="jabber:client" type="chat" to="test@example.com/resource-1">
    <body>Example message 1</body>
</message>
----

===== Sending XMPP message with from set to HTTP API component to bare JID:
The following data needs to be sent as HTTP POST request content to `/rest/stream/?api-key=@API_KEY@` which is the URL of the HTTP API component, in order to deliver message `Example message 1` to `test@example.com@`.
[source,xml]
----
<message xmlns="jabber:client" type="chat" to="test@example.com">
    <body>Example message 1</body>
</message>
----

===== Sending XMPP message with from set to specified JID to recipients full JID:
The following data needs to be sent as HTTP POST request content to `/rest/stream/?api-key=@API_KEY@` which is the URL of the HTTP API component, in order to deliver message `Example message 1` to `test@example.com/resource-1`.  This also sets the sender of message set to `sender@example.com`.
[source,xml]
----
<message xmlns="jabber:client" type="chat" from="sender@example.com" to="test@example.com/resource-1">
    <body>Example message 1</body>
</message>
----


== Scripting introduction
REST scripts in HTTP API component are used for processing all of requests incoming to REST endpoints.

To add a new action to the HTTP API component, you will need to create a script in Groovy in which there is an implementation of class extending `tigase.http.rest.Handler` class. URI of script will be created from the location of the script in the scripts folder. For example, if the `TestHandler` script with a regular expression will be set to `/test`, and will be placed in `scripts/rest/tested`, handler will be called for using the URI `/rest/tested/test`.

=== Properties
In extended classes you will need to set following properties:

regex:: regular expression which is used to match the request URI and parse parameters that are embedded in the URI, ie.: `/\/([^@\/]+)@([^@\/]+)/`
requiredRole:: required role of user in order to be able to access this URI. If `requiredRole` is not null value, then authentication will be required. Possible values are:
* null
* user
* admin
isAsync:: if set to true, it will be possible to wait for results (ie. wait for response for IQ stanza).

=== Closure parameters
Extended class should also set closures for one or more of following properties: `execGet`, `execPut`, `execPost`, `execDelete` depending on which HTTP action or actions you need to support for the following URI. Each closure *has a dynamic arguments list*.
Below is list of arguments passed to closure which describes how and when the list of arguments changes:

service:: implementation of `service` interface (used to access database or send/receive XMPP stanzas).
callback:: closure which needs to be called to return data (accepts only one argument of type `String`, `byte[]`, `Map`. If data type `Map` is used, it will be encoded to JSON or XML depending on `Content-Type` header.
user:: will be passed only if `requiredRole` is not set to null value. *In other cases this argument will not be in arguments list!*
content:: parsed content of request. *Will not be in arguments list if `Content-Length` of request is empty!* If `Content-Type` is of type XML or JSON returned type will be `Map` in other cases it will be an instance of `HttpServletRequest`.
x:: additional arguments passed to callback are groups from regular expression matching URI. *Groups are not passed as list, but are added to list of arguments as next arguments.*

If a property for the corresponding HTTP action is not set, then component will return HTTP error 404.
