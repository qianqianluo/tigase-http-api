
= HTTP File Upload component
HTTP File Upload component is implementation of http://xmpp.org/extensions/xep-0363.html:[XEP-0363: HTTP File Upload] specification allowing file transfer between XMPP clients by uploading file to HTTP server and sending only link to download file to recipient.

This implementation makes use of HTTP server used by Tigase XMPP Server and Tigase HTTP API component to provide web server for file upload and download.

By default this component is disabled and needs to be enabled in configuration file before it can be used. Also before it can be used proper database schema needs to be applied to database which will be used by component.

Example of enabling HTTP File Upload component:

* in DSL:
----
upload() {}
----
* in properties:
----
upload/active=true
----

== Metadata repository
To run component requires repository in which it can store informations about allocated slots. For that metadata repository is used.
For every domain it is possible to specify implementation of @FileUploadRepository@ which will be used.

By default metadata for all domains will be stored in `default` repository which implementation will be selected based on kind of data source defined as `default`.

=== DummyFileUploadRepository
This is very simple repository which in fact do not store any data. Due to that it can be very fast but it is not able to remove old uploads and apply any upload limits.

=== JDBCFileUploadRepository
This repository implementation stores data in database using stored procedures and functions.
By default data should be stored in `tig_hfu_slots` table but it can be changed by modification of stored procedures or reconfiguration of repository implementation to use different stored procedures and functions than provided.

== Storage
Component contains pluggable storage mechanism, which means that it is relatively easy to implement custom storage provide.
By default `DirectoryStore` based storage is used.

Currently following storage providers are available out of the box.

=== DirectoryStore
This store places files in subdirectories which names correspond to id of http://xmpp.org/extensions/xep-0363.html#intro:[allocated slot].
If required it is possible to group all slots directories allocated by single user in directory containing this user name.

By default there is no redundancy if this store is used in clustered environment. Every file will be stored only on single cluster node.

Available properties:

path:: Contains path to directory in which subdirectory with files will be created. *_(default: `data/upload`)_*
group-by-user:: Configures if slots directories should be grouped in user directory *_(default: false)_*

== Logic
Logic is responsible for generation of URI and applying limits. It groups all configuration settings related to allocation of slots, etc.

Available properties:

local-only:: Allow only users with accounts on local XMPP server to use this component for slot allocation. *_(default: true)_*
max-file-size:: Set maximal size of single allocated slot (maximal file size) in bytes. *_(default: 5MB)_*

port:: Port which should be used in generated upload and download URI. If it is not set, then secured (HTTPS) server port will be used if available and plain HTTP in other case.  *_(default: not set)_*
protocol:: Protocol which should be used (used only in conjunction with `port`). Possible values are:
* http
* https
serverName:: Server name to use as domain part in generated URI. *_(default: server hostname)_*

upload-uri-format:: Template used in generation of URI for file upload. *_(default: `{proto}://{serverName}:{port}/upload/{userJid}/{slotId}/{filename}`)_*
download-uri-format:: Template used in generation of URI for file download. *_(default: `{proto}://{serverName}:{port}/upload/{slotId}/{filename}`)_*

=== URI template format
Every block in template between `{` and `}` is named part which will be replaced by property value during generation of URI for slot.
Blocks possible to use:

proto:: Name of protocol
serverName:: Domain name of server
port:: Port on which HTTPS (or HTTP) server is listening
userJid:: JID of user requesting slot allocation
domain:: Domain of user requesting slot allocation
slotId:: Generated ID of slot
filename:: Name of file to upload

`slotId` and `filename` are required to be part of every URI template.

[WARNING]
Inclusion of `userJid` or `domain` will speed up lookup for slot id during upload and download operation if more than one metadata repository is configured.
However it may lead to leak of user JID or user domain if message with URI containing this part will be send to recipient which is unware of senders JID (ie. in case of anonymous MUC room).

== File upload expiration
From time to time it is required to remove expired file to make place for new uploads. This is done by `expiration` task.

Available properties:

expiration-time:: Time how long server will keep uploaded files. Value in https://docs.oracle.com/javase/8/docs/api/java/time/Period.html#parse-java.lang.CharSequence-:[Java Period format] *_(default: P30D - 30 days)_*
period:: Time how ofter server should look for expired files to remove. Value in https://docs.oracle.com/javase/8/docs/api/java/time/Period.html#parse-java.lang.CharSequence-:[Java Period format] *_(default: P1D - 1 day)_*
delay:: Time since server start up before server should look for expired files to remove. Value in https://docs.oracle.com/javase/8/docs/api/java/time/Period.html#parse-java.lang.CharSequence-:[Java Period format] *_(default: 0)_*
limit:: Maximal number of files to remove during single execution. *_(default: 10000)_*

== Examples
=== Complex configuration example
Configuration with separate repository for metadata to `example.com` pointing to `file_upload` data source, custom upload and download URI, maximal file size set to 10MB, expiration done every 6 hours and grouping of slot folders by user jid.

* as DSL:
----
upload() {
    logic {
        local-only = false
        max-file-size = 10485760
        upload-uri-format = '{proto}://{serverName}:{port}/upload/{userJid}/{slotId}/{filename}'
        download-uri-format = '{proto}://{serverName}:{port}/upload/{domain}/{slotId}/{filename}'
    }

    expiration {
        period = P6H
    }

    repositoryPool {
        'example.com' () {
            data-source = "file_upload"
        }
    }

    store {
        group-by-user = true
    }
}
----
* as properties:
----
upload/active=true
upload/logic/local-only=true
upload/logic/max-file-size=10485760
upload/logic/upload-uri-format={proto}://{serverName}:{port}/upload/{userJid}/{slotId}/{filename}
upload/logic/download-uri-format={proto}://{serverName}:{port}/upload/{domain}/{slotId}/{filename}
upload/expiration/period=P6H
upload/repositoryPool/domains=example.com
upload/repositiryPool/example.com/data-source=file_upload
upload/store/group-by-user=true
----

=== Example configuration for clustering with HA
Configuration for high availability in cluster with common storage at `/mnt/shared` and both servers available as `upload.example.com`

* as DSL:
----
upload() {
    logic {
        upload-uri-format = '{proto}://upload.example.com:{port}/upload/{userJid}/{slotId}/{filename}'
        download-uri-format = '{proto}://upload.example.com:{port}/upload/{domain}/{slotId}/{filename}'
    }

    store {
        path = '/mnt/shared/upload'
    }
}
----
* as properties:
----
upload/active=true
upload/logic/upload-uri-format={proto}://upload.example.com:{port}/upload/{userJid}/{slotId}/{filename}
upload/logic/download-uri-format={proto}://upload.example.com:{port}/upload/{domain}/{slotId}/{filename}
upload/store/path=/mnt/shared/upload
----
