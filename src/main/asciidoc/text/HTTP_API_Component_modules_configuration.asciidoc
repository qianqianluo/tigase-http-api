[[httpAPI]]
= Module specific configuration
:author: Daniel Wisnewski & Andrzej WÃ³jcik
:version: v2.0 July 2016. Reformatted for v8.0.0.

:toc:
:numbered:
:website: http://www.tigase.org

Tigase will try to start a standalone Jetty HTTP server at port 8080 and start up the default modules, including `RestModule` which will add context for REST API in the /rest path.
`RestModule` will also load all groovy scripts located in `scripts/rest/&#42;` directories and will bind them to proper actions for the `/rest/&#42;` paths.

*NOTE:* Scripts that handle HTTP requests are available in the component repository in `src/scriopts/groovy/tigase/rest/` directory.

Tigase's REST Component comes with two modules that can be enabled, disabled, and configured separately.
Common settings for modules for component properties are used in the following format: `component_name (module: value) {}`
the following settings are available for both listed modules:

- `active` - Boolean values true/false to enable or disable the module.
- `context-path` - Path of HTTP context under which the module should be available.
- `vhosts` - Comma separated list of virtual hosts for which the module should be available. If not configured, the module will be available for all vhosts.

[[restModuleConfig]]
== Rest Module
This is the Module that provides support for the REST API.
Available properties:

- `rest-scripts-dir` - Provides ability to specify path to scripts processing REST requests if you do not wish to use default (scripts/rest).
- `api-keys` - Comma separated list of strings which would be possible to use as keys to pass `api-key` parameter to request authorization for request execution. If nothing is passed, then no request will be allowed. To allow any request, this property needs to be set using the following:

This setting is used to provide API-keys that will provide access to the REST module. By default all access to REST module is blocked and nobody can access REST interface.

To allow access for specific clients you should create a list of API keys here and add one of the API keys listed here as the `api-key` HTTP request parameter sent to server. You can also allow anyone to access REST API by setting this to `open_access`, however this may leave your server vulnerable.

While configuring the API key, it is possible to set specific api keys for specific domains or vhosts.  These API keys will only be valid for the specified vhost and the path that matches the configured value.  For example:

.Example of API keys
[source,properties]
----
api-keys = [
    'test1',
    'test2:domain=api.example.com;rest.example.com:regex=/rest/*',
    'open_access:regex=/rest/test/.*'
]
----
does the following:

. sets API key `test1` which will be valid for any vhost and for any request.
. sets API key `test2` which will be valid only for requests to vhost `api.example.com` or `rest.example.com` and with a path matching the regular expression `/rest/*`
. sets open to everyone access to any domain/vhost with a request path matching the regular expression `/rest/test/.*`

Requests made to the HTTP service must conclude with one of the listed keys: `http://localhost:8080/rest/adhoc/sess-man@domain.com?api-key=test1`

=== Example

Configure API keys for the REST module:

[source,java]
----
http {
    rest {
        api-keys = [
            'test1',
            'test2:domain=api.example.com;rest.example.com:regex=/rest/*',
            'open_access:regex=/rest/test/.*'
        ]
    }
}
----


== DNS Web Service module
For web based XMPP clients it is not possible to execute DNS SRV requests to find address of XMPP server hosting for particular domain.
To solve this the DNS Web Service module was created.

It handles incoming HTTP GET request and using passed `domain` and `callback` HTTP parameters executes DNS requests as specified in link:https://xmpp.org/extensions/xep-0156.html[XEP-0156: Discovering Alternative XMPP Connection Methods].
Results are returned in JSON format for easy processing by web based XMPP client.

By default it is deployed at `dns-webservice`

=== Parameters
domain:: Domain name to look for XMPP SRV client records.
callback:: Due to security reasons web based client may not be able to access some DNS Web Service due to cross-domain AJAX requests. Passing optional `callback` parameter sets name of callback for JSONP requests and results proper response in JSONP format.

=== Discover way to connect to XMPP server hosting `sure.im` domain.
Sending HTTP GET request to `http://our-xmpp-server:8080/dns-webservice/?domain=sure.im&version=2` you will receive following response:

[source,java]
----
{
  domain: 'sure.im',
  c2s: [
    {
      host: 'tigase.me',
      ip: ['198.100.157.101','198.100.157.103','198.100.153.203'],
      port: 5222,
      priority: 5
    }
  ],
  bosh: [
    {url:'http://blue.sure.im:5280/bosh'},
    {url:'http://green.sure.im:5280/bosh'},
    {url:'http://orange.sure.im:5280/bosh'}
  ],
  websocket: [
    {url:'ws://blue.sure.im:5290/'},
    {url:'ws://green.sure.im:5290/'},
    {url:'ws://orange.sure.im:5290/'}
  ]
}
----

As you can see in here we have names and IP address of XMPP servers hosting `sure.im` domain as well as list of URI for establishing connections using BOSH or WebSocket.

This module is activated by default.  However, if you are operating in a test environment where you may not have SRV and A records setup to the domain you are using, you may want to disable this in your config.tdsl file with the following line:
[source,dsl]
----
rest {
    'dns-webservice' (active: false) {}
}
----

== Enabling password reset mechanism
It is possible to provide users with a mechanism for a password change in case if they forgot their password to the XMPP account.
To do that you need to have `tigase-extras.jar` in your classpath (it is part of `-dist-max` distribution package), enable `mailer` and `account-email-password-resetter`.

.Example configuration
[source,tdsl]
----
account-email-password-resetter () {}
mailer (class: tigase.extras.mailer.Mailer) {
    'mailer-from-address' = 'email-address@to-send-emails-from'
    'mailer-smtp-host' = 'smtp.email.server.com'
    'mailer-smtp-password' = 'password-for-email-account'
    'mailer-smtp-port' = '587' # Email server SMTP port
    'mailer-smtp-username' = 'username-for-email-account'
}
----

NOTE: You need to replace example configuration parameters with correct ones.

With this configuration in place and after restart of Tigase XMPP Server at url http://localhost:8080/rest/user/resetPassword will be available web form which may be used for password reset.

NOTE: This mechanism will only work if user provided real email address during account registration and if user still remembers and has access to email address used during registration.
